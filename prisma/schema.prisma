// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model RegionModel {
  regionId String  @id @default(uuid())
  enabled  Boolean @default(true)
  name     String

  pricingId String
  pricing   PricingModel @relation(fields: [pricingId], references: [pricingId])

  geofences GeofenceModel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model GeofenceModel {
  geofenceId String  @id @default(uuid())
  enabled    Boolean @default(true)

  name    String
  geojson Json

  regionId String
  region   RegionModel @relation(fields: [regionId], references: [regionId])

  profileId String
  profile   ProfileModel @relation(fields: [profileId], references: [profileId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PricingModel {
  pricingId String @id @default(uuid())
  name      String

  standardPrice Int // 기본 이용 요금 
  nightlyPrice  Int // 기본 야간 요금
  standardTime  Int // 기본 이용 제공(분)
  maxPrice      Int? // 최대 금액(추가 요금 제외)

  perMinuteStandardPrice Int // 기본 분당 요금
  perMinuteNightlyPrice  Int // 야간 분당 요금
  surchargePrice         Int // 추가 금액

  regions RegionModel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProfileModel {
  profileId String @id @default(uuid())
  name      String

  priority     Int
  speed        Int?
  color        String
  canReturn    Boolean
  hasSurcharge Boolean

  geofences GeofenceModel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
